Functional programming is a programming paradigm in which we try to bind everything in functions.

Its main focus is on “what to solve” in contrast to an imperative style where the main focus is “how to solve”. It uses expressions instead of statements. 

An expression is evaluated to produce a value whereas a statement is executed to assign variables. 

Concepts of functional programming:

Pure functions
Recursion
Referential transparency
Functions are First-Class and can be Higher-Order
Variables are Immutable


First-class functions are treated as first-class variable. The first class variables can be passed to functions as parameter, can be returned from functions or stored in data structures. 

Higher order functions are the functions that take other functions as arguments and they can also return functions.

Advantages:
-----------
Pure functions are easier to understand because they don’t change any states and depend only on the input given to them. Whatever output they produce is the return value they give. Their function signature gives all the information about them i.e. their return type and their arguments.

The ability of functional programming languages to treat functions as values and pass them to functions as parameters make the code more readable and easily understandable.

Testing and debugging is easier. Since pure functions take only arguments and produce output, they don’t produce any changes don’t take input or produce some hidden output. They use immutable values, so it becomes easier to check some problems in programs written uses pure functions.

It is used to implement concurrency/parallelism because pure functions don’t change variables or any other data outside of it.

It adopts lazy evaluation which avoids repeated evaluation because the value is evaluated and stored only when it is needed.

Disadvantages:
--------------
Sometimes writing pure functions can reduce the readability of code.
Writing programs in recursive style instead of using loops can be bit intimidating.
Writing pure functions are easy but combining them with rest of application and I/O operations is the difficult task.
Immutable values and recursion can lead to decrease in performance.